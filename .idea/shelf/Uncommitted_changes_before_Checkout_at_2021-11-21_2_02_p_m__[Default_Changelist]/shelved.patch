Index: src/GameModelTest/GameTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package GameModelTest;\r\n\r\nimport Model.Game;\r\nimport Model.Player;\r\n\r\nimport org.junit.*;\r\n\r\nimport javax.swing.*;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\npublic class GameTest {\r\n    private Game game;\r\n    private Player player;\r\n\r\n    @Before\r\n    public void setUp(){\r\n        game = new Game();\r\n        player = new Player(1);\r\n    }\r\n\r\n    @Test\r\n    public void testCreationOfPLayers(){\r\n        game.createPlayers(3);\r\n        assertEquals(3, game.getPlayers().size());\r\n    }\r\n\r\n    @Test\r\n    public void testNumOfInitializedPlayers(){\r\n        game.initializePlayers(2);\r\n        assertEquals(2, game.getPlayers().size());\r\n    }\r\n\r\n    @Test\r\n    public void testThePassingOfATurn(){\r\n        game.startGame(3);\r\n        game.passTurn();\r\n        assertEquals(2, game.getCurrentPlayer().getPlayerNumber());\r\n    }\r\n\r\n    @Test\r\n    public void testSettingAPlayerPosition(){\r\n        game.startGame(3);\r\n        game.setCurrentPlayerPosition(5);\r\n        assertEquals(5, game.getCurrentPlayerPosition());\r\n    }\r\n\r\n    /*\r\n    @Test\r\n    public void testPromptingPlayerPurchase(){\r\n        game.startGame(3);\r\n        game.moveToken();\r\n        assertEquals(1, game.getCurrentPlayer().getOwnedProperties().size());\r\n    }\r\n     */\r\n\r\n    @Test\r\n    public void testRemovalOfBankruptPlayer(){\r\n        game.startGame(3);\r\n        game.getCurrentPlayer().setBalance(-100);\r\n        game.removeBankruptPlayer();\r\n        assertEquals(2, game.getPlayers().size());\r\n    }\r\n/*\r\n    @Test\r\n    public void testSearchForAWinner(){\r\n        game.startGame(2);\r\n        game.getCurrentPlayer().setBalance(-100);\r\n        game.checkPlayerBalance(game.getCurrentPlayer());\r\n        assertEquals(1, game.getPlayers().size());\r\n    }*/\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/GameModelTest/GameTest.java b/src/GameModelTest/GameTest.java
--- a/src/GameModelTest/GameTest.java	(revision 85bc7b6f4bdca5beac15f30caf7957e7f9809902)
+++ b/src/GameModelTest/GameTest.java	(date 1637521089857)
@@ -1,3 +1,4 @@
+/*
 package GameModelTest;
 
 import Model.Game;
@@ -53,7 +54,7 @@
         game.moveToken();
         assertEquals(1, game.getCurrentPlayer().getOwnedProperties().size());
     }
-     */
+
 
     @Test
     public void testRemovalOfBankruptPlayer(){
@@ -69,7 +70,8 @@
         game.getCurrentPlayer().setBalance(-100);
         game.checkPlayerBalance(game.getCurrentPlayer());
         assertEquals(1, game.getPlayers().size());
-    }*/
+    }
 
 
 }
+*/
\ No newline at end of file
Index: src/View/View.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package View;\r\n\r\nimport Controller.Controller;\r\nimport Model.*;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.util.ArrayList;\r\n\r\npublic class View extends JFrame implements ModelUpdateListener {\r\n    Game gameModel;\r\n    JButton newGameButton;\r\n    JButton rollDieButton;\r\n    JButton passTurnButton;\r\n    JButton buyButton;\r\n    JButton quitButton;\r\n    ArrayList<JButton> listOfCommandButtons;\r\n    JTextArea feedbackArea;\r\n    JButton stateButton;\r\n    BoardOverlay boardOverlay;\r\n    MonopolyBoard monopolyBoard;\r\n    //MyPanel panel;\r\n\r\n    public View(Game gameModel) {\r\n        super(\"Monopoly\");\r\n        this.gameModel = gameModel;\r\n        initialize();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Game gameModel = new Game();\r\n        View gameView = new View(gameModel);\r\n        gameModel.setViewer(gameView);\r\n        Controller gameController = new Controller(gameModel, gameView);\r\n        gameView.initialize(gameController);\r\n    }\r\n\r\n    static int askUser(Integer[] choices) {\r\n        Integer s = (Integer) JOptionPane.showInputDialog(\r\n                null,\r\n                \"How many players are playing today?\",\r\n                \"Select the number of players!\",\r\n                JOptionPane.PLAIN_MESSAGE,\r\n                null,\r\n                choices,\r\n                choices[0]);\r\n        return s;\r\n    }\r\n\r\n    public void initialize() {\r\n        //Initialize the View\r\n        JFrame myFrame = new JFrame(\"Monopoly\");\r\n        Container root = getContentPane();\r\n        root.setLayout(new BorderLayout());\r\n\r\n\r\n        //The layered pane will have multiple layers in order for us to overlay components\r\n        JLayeredPane jLayeredPane = new JLayeredPane();\r\n        jLayeredPane.setSize(950, 550);\r\n        monopolyBoard = new MonopolyBoard();\r\n        jLayeredPane.add(monopolyBoard, JLayeredPane.DEFAULT_LAYER);\r\n\r\n        gameModel.addView(this);\r\n\r\n        boardOverlay = new BoardOverlay(gameModel);\r\n        jLayeredPane.add(boardOverlay, JLayeredPane.POPUP_LAYER);\r\n        root.add(jLayeredPane, BorderLayout.CENTER);\r\n\r\n        //Menu Panel will have the set of commands that a user can choose from in order to play the game\r\n        JPanel menuPanel = new JPanel();\r\n\r\n        //Creating JButtons and adding actionlisteners for them\r\n        newGameButton = new JButton(\"New Game\");\r\n        rollDieButton = new JButton(\"Roll Die\");\r\n        buyButton = new JButton(\"Buy\");\r\n        passTurnButton = new JButton(\"Pass Turn\");\r\n        quitButton = new JButton(\"Quit Game\");\r\n        stateButton = new JButton(\"State\");\r\n        rollDieButton.setEnabled(false);\r\n        passTurnButton.setEnabled(false);\r\n        buyButton.setEnabled(false);\r\n        stateButton.setEnabled(false);\r\n        passTurnButton.setEnabled(false);\r\n        quitButton.setEnabled(false);\r\n        listOfCommandButtons = new ArrayList<JButton>();\r\n        listOfCommandButtons.add(rollDieButton);\r\n        listOfCommandButtons.add(buyButton);\r\n        listOfCommandButtons.add(passTurnButton);\r\n        listOfCommandButtons.add(stateButton);\r\n        listOfCommandButtons.add(quitButton);\r\n        listOfCommandButtons.add(newGameButton);\r\n\r\n\r\n        feedbackArea = new JTextArea(\"Welcome to Monopoly! Please press New Game in order to start!\\n\");\r\n        feedbackArea.setRows(8);\r\n        JScrollPane feedbackAreaScrollPane = new JScrollPane(feedbackArea);\r\n        menuPanel.setLayout(new BorderLayout());\r\n        menuPanel.add(feedbackAreaScrollPane, BorderLayout.NORTH);\r\n        menuPanel.add(newGameButton, BorderLayout.WEST);\r\n\r\n        JPanel centerPanel = new JPanel();\r\n        centerPanel.setLayout(new BorderLayout());\r\n        menuPanel.add(centerPanel, BorderLayout.CENTER);\r\n        centerPanel.add(rollDieButton, BorderLayout.CENTER);\r\n        centerPanel.add(buyButton, BorderLayout.WEST);\r\n        centerPanel.add(stateButton, BorderLayout.EAST);\r\n        menuPanel.add(passTurnButton, BorderLayout.EAST);\r\n        menuPanel.add(quitButton, BorderLayout.SOUTH);\r\n        root.add(menuPanel, BorderLayout.SOUTH);\r\n\r\n        //Initialization of the frame\r\n        this.setVisible(true);\r\n        this.setResizable(false);\r\n        this.setSize(950, 650);\r\n        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\r\n    }\r\n\r\n\r\n    public void promptPropertyPurchase(){\r\n        rollDieButton.setEnabled(false);\r\n        int propertyPrice = ((Property) gameModel.getBoard().getIndex(gameModel.getCurrentPlayer().getPosition())).getValue();\r\n        setFeedbackArea(\"\\nPlayer \" + gameModel.getCurrentPlayer().getPlayerNumber() + \": Would you like to purchase \" + gameModel.getBoardName() +\r\n                \"? It costs $\" + propertyPrice + \" and you currently have $\" + gameModel.getCurrentPlayer().getBalance() + \".\\nClick the 'Buy' button to purchase or 'Pass Turn' to move on.\\n\");\r\n        checkPlayerBalance(gameModel.getCurrentPlayer());\r\n        lookingForWinner();\r\n    }\r\n\r\n    public void promptUtilityPurchase(){\r\n        rollDieButton.setEnabled(false);\r\n        int utilityPrice = ((Utility) gameModel.getBoard().getIndex(gameModel.getCurrentPlayer().getPosition())).getValue();\r\n        setFeedbackArea(\"\\nPlayer \" + gameModel.getCurrentPlayer().getPlayerNumber() + \": Would you like to purchase \" + gameModel.getBoardName() +\r\n                \"? It costs $\" + utilityPrice + \" and you currently have $\" + gameModel.getCurrentPlayer().getBalance() + \".\\nClick the 'Buy' button to purchase or 'Pass Turn' to move on.\\n\");\r\n        checkPlayerBalance(gameModel.getCurrentPlayer());\r\n        lookingForWinner();\r\n        rollDieButton.setEnabled(true);\r\n    }\r\n\r\n    public void promptRailroadPurchase() {\r\n        rollDieButton.setEnabled(false);\r\n        int railroadPrice = ((Railroad) gameModel.getBoard().getIndex(gameModel.getCurrentPlayer().getPosition())).getValue();\r\n        setFeedbackArea(\"\\nPlayer \" + gameModel.getCurrentPlayer().getPlayerNumber() + \": Would you like to purchase \" + gameModel.getBoardName() +\r\n                \"? It costs $\" + railroadPrice + \" and you currently have $\" + gameModel.getCurrentPlayer().getBalance() + \".\\nClick the 'Buy' button to purchase or 'Pass Turn' to move on.\\n\");\r\n        checkPlayerBalance(gameModel.getCurrentPlayer());\r\n        lookingForWinner();\r\n        rollDieButton.setEnabled(true);\r\n    }\r\n\r\n    /**\r\n     * @author John Afolayan\r\n     * This method taxes a player whenver they land on another player's property\r\n     */\r\n    public void taxProperty(){\r\n        Player ownedBy = gameModel.whoOwnsProperty((Property) gameModel.getBoard().getIndex(gameModel.getCurrentPlayer().getPosition())); //player who owns property\r\n        if(!ownedBy.equals(gameModel.getCurrentPlayer())){ //If current player who lands on property doesn't own that property, tax them.\r\n            int amount = (int) (((Property) gameModel.getBoard().getIndex(gameModel.getCurrentPlayer().getPosition())).getValue() * 0.1); //amount to decrement by, 10%\r\n            gameModel.getCurrentPlayer().decrementBalance(amount); //remove $amount from player being taxed\r\n            ownedBy.incrementBalance(amount); //add $amount to player who owns property\r\n            setFeedbackArea(\"\\nPlayer \" + gameModel.getCurrentPlayer().getPlayerNumber() + \": You've landed on a property owned by player \"+  ownedBy.getPlayerNumber() + \". You've been taxed $\" + amount + \", your new balance is $\" + gameModel.getCurrentPlayer().getBalance());\r\n            checkPlayerBalance(gameModel.getCurrentPlayer());\r\n            lookingForWinner();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Hamza\r\n     * This method taxes a player whenever they land of another players utility\r\n     */\r\n\r\n    public void taxUtility(int tax){\r\n        Player ownedBy = gameModel.whoOwnsUtility((Utility) gameModel.getBoard().getIndex(gameModel.getCurrentPlayer().getPosition()));\r\n        if(!ownedBy.equals(gameModel.getCurrentPlayer())){\r\n            gameModel.getCurrentPlayer().decrementBalance(tax);\r\n            ownedBy.incrementBalance(tax);\r\n            JOptionPane.showMessageDialog(null, \"Player \" + gameModel.getCurrentPlayer().getPlayerNumber() + \": You've landed on a utility owned by player \"+  ownedBy.getPlayerNumber() + \". You've been taxed $\" + tax + \", your new balance is $\" + gameModel.getCurrentPlayer().getBalance());\r\n            checkPlayerBalance(gameModel.getCurrentPlayer());\r\n            lookingForWinner();\r\n        }\r\n    }\r\n\r\n    public void taxRailroad(int tax) {\r\n        Player ownedBy = gameModel.whoOwnsRailroad((Railroad) gameModel.getBoard().getIndex(gameModel.getCurrentPlayer().getPosition()));\r\n        if(!ownedBy.equals(gameModel.getCurrentPlayer())){\r\n            gameModel.getCurrentPlayer().decrementBalance(tax);\r\n            ownedBy.incrementBalance(tax);\r\n            JOptionPane.showMessageDialog(null, \"Player \" + gameModel.getCurrentPlayer().getPlayerNumber() + \": You've landed on a railroad owned by player \"+  ownedBy.getPlayerNumber() + \". You've been taxed $\" + tax + \", your new balance is $\" + gameModel.getCurrentPlayer().getBalance());\r\n            checkPlayerBalance(gameModel.getCurrentPlayer());\r\n            lookingForWinner();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Ibrahim Said\r\n     * This method checks the balance of a player and determines if they are eliminated or not.\r\n     */\r\n    public void checkPlayerBalance(Player player){\r\n        int balance = player.getBalance();\r\n        if (balance <= 0){\r\n            gameModel.removeBankruptPlayer();\r\n            JOptionPane.showMessageDialog(null, \"Player \" + gameModel.getCurrentPlayer().getPlayerNumber() + \": You are now bankrupt! You have been kicked out of the game. Too bad...\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Ibrahim Said\r\n     * This method checks if a player has won the game.\r\n     */\r\n    public void lookingForWinner(){\r\n        if (gameModel.getPlayers().size() == 1){\r\n            JOptionPane.showMessageDialog(null, \"Player \" + gameModel.getPlayers().get(0).getPlayerNumber() + \" has won the game! Congratulations\");\r\n            System.exit(0);\r\n        }\r\n    }\r\n\r\n    public void payToLeaveJail(){\r\n        if(gameModel.playerIsInJail()){\r\n            int input = JOptionPane.showConfirmDialog(null, \"Player \" + gameModel.getCurrentPlayer().getPlayerNumber() + \": You are in Jail. Would you like to pay $50 bail to leave?\" + \"\\nClick yes to pay bail or no to stay in jail.\", \"Pay bail?\", JOptionPane.YES_NO_OPTION);\r\n            if(input == JOptionPane.YES_OPTION){\r\n                gameModel.getCurrentPlayer().decrementBalance(50);\r\n                gameModel.freePlayerFromJail();\r\n            } else if(input == JOptionPane.NO_OPTION){\r\n                setFeedbackArea(\"\\nYikes :/ another night in jail doesn't sound fun. Good luck.\");\r\n            } else {\r\n                setFeedbackArea(\"Seems like there might have been an error. Please report it to the developer.\");\r\n            }\r\n        }\r\n        repaint();\r\n    }\r\n\r\n\r\n    private void initialize(Controller gameController) {\r\n        for (JButton button : listOfCommandButtons) {\r\n            button.addActionListener(gameController);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @author John Afolayan\r\n     * This method unlocks GUI buttons after a player specifies amount of players\r\n     */\r\n    public void unlockButtons() {\r\n        for (JButton button : listOfCommandButtons) {\r\n            if(!button.getText().equalsIgnoreCase(\"Buy\"))\r\n                button.setEnabled(true);\r\n        }\r\n    }\r\n\r\n    public void lockBuyButton(){\r\n        buyButton.setEnabled(false);\r\n    }\r\n\r\n    public void unlockBuyButton(){\r\n        buyButton.setEnabled(true);\r\n    }\r\n\r\n    public void unlockRollDieButton(){\r\n        rollDieButton.setEnabled(true);\r\n    }\r\n    public void lockRollDieButton(){\r\n        rollDieButton.setEnabled(false);\r\n    }\r\n\r\n    public JTextArea getFeedbackArea() {\r\n        return feedbackArea;\r\n    }\r\n\r\n    public void setFeedbackArea(String feedbackAreaText) {\r\n        this.feedbackArea.append(feedbackAreaText);\r\n    }\r\n\r\n    public JButton getNewGameButton() {\r\n        return newGameButton;\r\n    }\r\n\r\n    private void goToTheBottomOfTextField() {\r\n        getFeedbackArea().getCaret().setDot(Integer.MAX_VALUE);\r\n    }\r\n\r\n    public int numberOfPlayersRequest() {\r\n        Integer[] choices = new Integer[]{2, 3, 4, 5, 6, 7, 8};\r\n        int choice = askUser(choices);\r\n        return choice;\r\n    }\r\n\r\n    /*\r\n     * This method updates the model\r\n     */\r\n    @Override\r\n    public void modelUpdated() {\r\n        repaint();\r\n    }\r\n\r\n    @Override\r\n    public void dieCount(int value, int position) {\r\n        JOptionPane.showMessageDialog(null, \"Player \" + gameModel.getCurrentPlayer().getPlayerNumber() + \": You have rolled two die that added up to \" + value);\r\n        setFeedbackArea(\"\\nYour new position is now \" + position + \": \" + gameModel.getBoardName());\r\n    }\r\n\r\n    @Override\r\n    public void unlockPropertyBuy() {\r\n        unlockBuyButton();\r\n        promptPropertyPurchase();\r\n        goToTheBottomOfTextField();\r\n    }\r\n\r\n    @Override\r\n    public void unlockUtilityBuy() {\r\n        unlockBuyButton();\r\n        promptUtilityPurchase();\r\n        goToTheBottomOfTextField();\r\n    }\r\n\r\n    @Override\r\n    public void unlockRailroadBuy() {\r\n        unlockBuyButton();\r\n        promptRailroadPurchase();\r\n        goToTheBottomOfTextField();\r\n    }\r\n\r\n    @Override\r\n    public void passTurn(int playerNumber) {\r\n        setFeedbackArea(\"\\nCurrently turn of: Player \" + playerNumber + \"\\n\");\r\n    }\r\n\r\n    @Override\r\n    public void taxProperty(int tax, Player ownedBy, int playerNumber, int balance) {\r\n        JOptionPane.showMessageDialog(null, \"Player \" + playerNumber + \": You've landed on a property owned by player \"+  ownedBy.getPlayerNumber() + \". You've been taxed $\" + tax + \", your new balance is $\" + balance);\r\n        //checkPlayerBalance(playerNumber);\r\n        lookingForWinner();\r\n    }\r\n\r\n    @Override\r\n    public void confirmPurchase(int playerNumber, String name, int balance) {\r\n        lockBuyButton();\r\n        setFeedbackArea(\"\\nPlayer \" + playerNumber + \": Congratulations, you now own: \" + name +\r\n        \"\\nYour new balance is: $\" + balance + \"\\nSpend wisely!\");\r\n    }\r\n\r\n    @Override\r\n    public void printState(int i, int balance, String toString, int balance1) {\r\n        setFeedbackArea(\"You are player \" + (i) + \"\\nYou own the following properties:\\n\"\r\n                + toString + \"\\nYour current balance is \" + balance);\r\n        goToTheBottomOfTextField();\r\n    }\r\n\r\n    @Override\r\n    public void initializeGame(int numberOfPlayers, int playerNumber) {\r\n        unlockButtons();\r\n        setFeedbackArea(\"A new game has begun with \" + numberOfPlayers + \" players\\n\" + \"\\nCurrently turn of: Player \" + playerNumber + \"\\n\");\r\n        getNewGameButton().setEnabled(false);\r\n    }\r\n\r\n    @Override\r\n    public void manualPassUpdate(int playerNumber) {\r\n        setFeedbackArea(\"\\nPlayer # \" + playerNumber + \" has passed their turn\\n\");\r\n        goToTheBottomOfTextField();\r\n    }\r\n\r\n    @Override\r\n    public void returnWinner(int playerNumber) {\r\n        JOptionPane.showMessageDialog(null, \"Player \" + playerNumber + \" has won the game! Congratulations\");\r\n    }\r\n\r\n    @Override\r\n    public void displayBankruptPlayer(int playerNumber) {\r\n        JOptionPane.showMessageDialog(null, \"Player \" + playerNumber + \": You are now bankrupt! You have been kicked out of the game. Too bad...\");\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/View/View.java b/src/View/View.java
--- a/src/View/View.java	(revision 85bc7b6f4bdca5beac15f30caf7957e7f9809902)
+++ b/src/View/View.java	(date 1637520973970)
@@ -211,6 +211,7 @@
         }
     }
 
+    /*
     public void payToLeaveJail(){
         if(gameModel.playerIsInJail()){
             int input = JOptionPane.showConfirmDialog(null, "Player " + gameModel.getCurrentPlayer().getPlayerNumber() + ": You are in Jail. Would you like to pay $50 bail to leave?" + "\nClick yes to pay bail or no to stay in jail.", "Pay bail?", JOptionPane.YES_NO_OPTION);
@@ -226,6 +227,8 @@
         repaint();
     }
 
+     */
+
 
     private void initialize(Controller gameController) {
         for (JButton button : listOfCommandButtons) {
